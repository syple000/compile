STMTS

%% 
#include "../../ir/instr.h"

static InstrFlow instrFlow;

static void ShowInstr(Instruction* instr) {
    if (instr->_isLabel) {
        std::cout << instr->_components[0] << ": ";
    } else {
        for (auto str : instr->_components) {
            std::cout << str << " ";
        }
        std::cout << std::endl;
    }
}

%%

1 STMTS STMT STMTS;
2 STMTS null
    {reduction_action=
        instrFlow.Traverse(ShowInstr);
    };
3 STMT while lp M 
    {action_1=
        $-1._value = instrFlow.GetTail()->_components[0];
    } 
    BOOL rp M 
    {action_2=
        auto boolAttr = (BackFillAttr*)$-3.GetAttribute("back_fill");
        boolAttr->BackFill("true", instrFlow.GetTail()->_components[0]);} 
    STMT
    {action_3=
        instrFlow.InsertInstr({"goto", $-5._value});
    } 
    M 
    {action_4=
        auto boolAttr = (BackFillAttr*)$-5.GetAttribute("back_fill");
        boolAttr->BackFill("false", instrFlow.GetTail()->_components[0]);
        auto stmtAttr = (BackFillAttr*)$-2.GetAttribute("back_fill");
        if (stmtAttr != nullptr) {
            stmtAttr->BackFill("break", instrFlow.GetTail()->_components[0]);
        }
    };
4 STMT break sem
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("break", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr);
    };
5 STMT id sem 
    {reduction_action=
        instrFlow.InsertInstr({$-2._value});
    };
6 TAF true 
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("true", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr);
    };
7 TAF false
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("false", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr); 
    };
8 BOOL BOOL or M 
    {action_5=
        auto boolAttr = (BackFillAttr*)$-3.GetAttribute("back_fill");
        boolAttr->BackFill("false", instrFlow.GetTail()->_components[0]);
        boolAttr->RemoveList("false");
    }
    JOIN 
    {reduction_action=
        CfInfo::MoveAttributes($-1, pinfo);
        auto boolAttr = (BackFillAttr*)$-4.GetAttribute("back_fill");
        auto pattr = (BackFillAttr*)pinfo.GetAttribute("back_fill");
        pattr->AddAllListElems("true", boolAttr);
    };
9 BOOL JOIN 
    {reduction_action=
        CfInfo::MoveAttributes($-1, pinfo);
    };
10 JOIN JOIN and M 
    {action_6=
        auto joinAttr = (BackFillAttr*)$-3.GetAttribute("back_fill");
        joinAttr->BackFill("true", instrFlow.GetTail()->_components[0]);
        joinAttr->RemoveList("true");
    } 
    TAF 
    {reduction_action=
        CfInfo::MoveAttributes($-1, pinfo);
        auto pattr = (BackFillAttr*)pinfo.GetAttribute("back_fill");
        auto joinAttr = (BackFillAttr*)$-4.GetAttribute("back_fill");
        pattr->AddAllListElems("false", joinAttr);
    };
11 JOIN TAF
    {reduction_action=
        CfInfo::MoveAttributes($-1, pinfo);
    };
12 M null
    {reduction_action=
        instrFlow.InsertLabel(instrFlow.GetLabel());
    };