STMTS

%% 
#include "../../ir/instr.h"

static InstrFlow instrFlow;

static void ShowInstr(Instruction* instr) {
    if (instr->_label.size() != 0) {
        std::cout << instr->_label << ": ";
    }
    for (auto str : instr->_components) {
        std::cout << str << " ";
    }
    std::cout << std::endl;
}
%%

1 STMTS STMT STMTS;
2 STMTS null
    {reduction_action=
        instrFlow.InsertInstr({"goto", "end"});
        instrFlow.Traverse(ShowInstr);
    };
3 STMT while lp 
    {action_1=
        $-1._value = "label";
    } 
    BOOL rp
    {action_2=
        auto boolAttr = (BackFillAttr*)$-2.GetAttribute("back_fill");
        instrFlow.AddNextInstrFillBackInfo("true", boolAttr);
    } 
    STMT
    {action_3=
        auto label = $-4._value;
        instrFlow.InsertInstr({"goto", label});
    }
    {reduction_action=
        CfInfo::MoveAttributes($-3, $0);
        auto boolAttr = (BackFillAttr*)$0.GetAttribute("back_fill");
        auto stmtAttr = (BackFillAttr*)$-1.GetAttribute("back_fill");
        if (stmtAttr != nullptr) {
            boolAttr->AddAllListElems("break", stmtAttr);
        }
        instrFlow.AddNextInstrFillBackInfo("false", boolAttr);
        instrFlow.AddNextInstrFillBackInfo("break", boolAttr);
    };
4 STMT break sem
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("break", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr);
    };
5 STMT id sem 
    {reduction_action=
        instrFlow.InsertInstr({$-2._value});
    };
6 TAF true 
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("true", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr);
        if ($1.size() > 1) {
            if ($-2._value == "label" && instrFlow.GetTail()->_label.size() == 0) {
                instrFlow.GetTail()->_label = instrFlow.GetLabel();
            }
            $-2._value = instrFlow.GetTail()->_label;
        }
    };
7 TAF false
    {reduction_action=
        instrFlow.InsertInstr({"goto", ""});
        auto attr = new BackFillAttr();
        attr->AddListElem("false", instrFlow.GetTail(), 1);
        pinfo.AddAttribute(attr); 
        if ($1.size() > 1) {
            if ($-2._value == "label" && instrFlow.GetTail()->_label.size() == 0) {
                instrFlow.GetTail()->_label = instrFlow.GetLabel();
            }
            $-2._value = instrFlow.GetTail()->_label;
        }
    };
8 BOOL BOOL or
    {action_5=
        auto boolAttr = (BackFillAttr*)$-2.GetAttribute("back_fill");
        instrFlow.AddNextInstrFillBackInfo("false", boolAttr);
    }
    JOIN 
    {reduction_action=
        CfInfo::MoveAttributes($-1, $0);
        auto boolAttr = (BackFillAttr*)$-3.GetAttribute("back_fill");
        auto pattr = (BackFillAttr*)pinfo.GetAttribute("back_fill");
        pattr->AddAllListElems("true", boolAttr);
    };
9 BOOL JOIN 
    {reduction_action=
        CfInfo::MoveAttributes($-1, $0);
    };
10 JOIN JOIN and
    {action_6=
        auto joinAttr = (BackFillAttr*)$-2.GetAttribute("back_fill");
        instrFlow.AddNextInstrFillBackInfo("true", joinAttr);
    } 
    TAF 
    {reduction_action=
        CfInfo::MoveAttributes($-1, $0);
        auto pattr = (BackFillAttr*)$0.GetAttribute("back_fill");
        auto joinAttr = (BackFillAttr*)$-3.GetAttribute("back_fill");
        pattr->AddAllListElems("false", joinAttr);
    };
11 JOIN TAF
    {reduction_action=
        CfInfo::MoveAttributes($-1, $0);
    };